if _G.IS_VR then 
    return
end
if RequiredScript == "lib/managers/playermanager" then
	Hooks:PreHook(PlayerManager, "activate_temporary_upgrade", "ICT_PlayerManager_activate_temporary_upgrade_armor_timer", function (self, category, upgrade)
		if upgrade == "armor_break_invulnerable" then
			local upgrade_value = self:upgrade_value(category, upgrade)
			if upgrade_value == 0 then return end
			local teammate_panel = managers.hud:get_teammate_panel_by_peer()
			if teammate_panel then
			    if ICT:GetOption("armorer_cooldown_radial") and ICT:GetOption("armorer_cooldown_timer") and teammate_panel.update_cooldown_timer then
				    teammate_panel:update_cooldown_timer(upgrade_value[2])
				end
				if ICT:GetOption("armorer_cooldown_radial") and teammate_panel.animate_invulnerability then
				    teammate_panel:animate_invulnerability(upgrade_value[1])
				end
			end
		end
		if upgrade == "mrwi_health_invulnerable" then
			local upgrade_value = self:upgrade_value(category, upgrade)
			if upgrade_value == 0 then return end
			local teammate_panel = managers.hud:get_teammate_panel_by_peer()
			if teammate_panel then
			    if ICT:GetOption("armorer_cooldown_radial") and ICT:GetOption("armorer_cooldown_timer") and teammate_panel.health_cooldown_timer then
				    teammate_panel:health_cooldown_timer(2)
				end
				if ICT:GetOption("armorer_cooldown_radial") and teammate_panel.animate_health_invulnerability then
				    teammate_panel:animate_health_invulnerability(2)
				end
			end
		end
	end)

elseif RequiredScript == "lib/managers/hud/hudteammate" then	
	Hooks:PostHook(HUDTeammate, "set_custom_radial", "ICT_HUDTeammate_set_custom_radial", function (self, data, ...)
        local duration = data.current / data.total
		if self._main_player and self._cooldown_timer then
		    if duration > 0 then
				self._cooldown_timer:set_visible(false)
				self._cooldown_health_timer:set_visible(false)
				self._cooldown_icon:set_visible(false)
				self._health_cooldown_icon:set_visible(false)
				if self._radial_health_panel:child("radial_armor") then
					self._radial_health_panel:child("radial_armor"):set_alpha(0)
					self._radial_health_panel:child("animate_health_circle"):set_alpha(0)
				end
			else
				self._cooldown_timer:set_visible(self._armor_invulnerability_timer)
				self._cooldown_health_timer:set_visible(self._health_timer)
				self._cooldown_icon:set_visible(self._armor_invulnerability_timer and not self._health_timer)
				self._health_cooldown_icon:set_visible(self._health_timer)
				if self._radial_health_panel:child("radial_armor") then
					self._radial_health_panel:child("radial_armor"):set_alpha(1)
					self._radial_health_panel:child("animate_health_circle"):set_alpha(1)
				end
			end
		end
	end)
	
	Hooks:PostHook(HUDTeammate, "_create_condition", "ICT_HUDTeammate_create_condition", function (self, ...)
		self._health_panel = self._health_panel or self._player_panel:child("radial_health_panel")
		if self._main_player then
			self._cooldown_timer = self._health_panel:text({
				name = "cooldown_timer",
				text = "",
				color = Color.white,
				visible = false,
				align = "center",
				vertical = "center",
				y = 10,
				font = tweak_data.hud.medium_font_noshadow,
				font_size = 16,
				alpha = 1,
				layer = 4
			})
			self._cooldown_health_timer = self._health_panel:text({
				name = "cooldown_health_timer",
				text = "",
				color = Color.white,
				visible = false,
				align = "center",
				vertical = "center",
				y = -4,
				font = tweak_data.hud.medium_font_noshadow,
				font_size = 16,
				alpha = 1,
				layer = 4
			})
			self._cooldown_icon = self._health_panel:bitmap({
				name = "cooldown_icon",
				texture = "guis/dlcs/opera/textures/pd2/specialization/icons_atlas",
				texture_rect = {0, 0, 64, 64},
				valign = "center",
				x = 14,
				y = 15,
				w = 40,
				h = 40,
				color = ICT:GetColor("Ability_icon_color") or Color.white,
				visible = false,
				align = "center",
				alpha = 0.4,
				layer = 3
			})
			self._health_cooldown_icon = self._health_panel:bitmap({
				name = "health_cooldown_icon",
				texture = "guis/textures/pd2_mod_ICT/health_cooldown_icon",
				valign = "center",
				x = 9.5,
				y = 19,
				w = 48,
				h = 29,
				color = ICT:GetColor("Ability_icon_color") or Color.white,
				visible = false,
				align = "center",
				alpha = 0.4,
				layer = 3
			})
		end
	end)

	Hooks:PreHook(HUDTeammate, "_create_radial_health", "ICT_Ability_create_radial_health", function (self, radial_health_panel)
		self._radial_health_panel = radial_health_panel
		local radial_armor = radial_health_panel:bitmap({
			texture = "guis/textures/pd2/hud_swansong",
			name = "radial_armor",
			blend_mode = "add",
			visible = false,
			render_template = "VertexColorTexturedRadial",
			layer = 5,
			color = Color(1, 0, 0, 0),
			w = radial_health_panel:w(),
			h = radial_health_panel:h()
		})
		local animate_health_circle = radial_health_panel:bitmap({
			texture = "guis/textures/pd2_mod_ICT/animate_health_circle",
			name = "animate_health_circle",
			blend_mode = "add",
			visible = false,
			render_template = "VertexColorTexturedRadial",
			layer = 5,
			color = Color(1, 0, 0, 0),
			w = radial_health_panel:w(),
			h = radial_health_panel:h()
		})
    end)

	function HUDTeammate:update_cooldown_timer(t)
		local timer = self._cooldown_timer
    	if t and t > 1 and timer then
        	timer:stop()
        	timer:animate(function(o)
            	o:set_visible(true)
            	local t_left = t
				local health_icon = self._health_cooldown_icon 
				local armor_icon = self._cooldown_icon 
            	while t_left >= 0.1 do
					self._armor_invulnerability_timer = true
                	t_left = t_left - coroutine.yield()
					t_format = t_left < 9.9 and "%.1f" or "%.f"
                	o:set_text(string.format(t_format, t_left))
					o:set_color(ICT:GetColor("armorer_cooldown_timer_color2") or Color.red)
            	end
				self._armor_invulnerability_timer = false
            	o:set_visible(false)
				armor_icon:set_visible(false)
				health_icon:set_visible(self._health_timer)
        	end)
    	end
	end

	function HUDTeammate:animate_invulnerability(duration)
	    if not self._radial_health_panel:child("radial_armor") then return end
  		self._radial_health_panel:child("radial_armor"):animate(function (o)
		    local armor_icon = self._cooldown_icon 
    		o:set_color(Color(1, 1, 1, 1))
			self._armor_invulnerability_timer = true
			armor_icon:set_visible(self._armor_invulnerability_timer and not self._health_timer)
			armor_icon:set_alpha(not ICT:GetOption("armorer_cooldown_timer") and 1 or 0.4)
    		o:set_visible(true)
    		over(duration, function (p)
      			o:set_color(Color(1, 1 - p, 1, 1))
    		end)
			if not ICT:GetOption("armorer_cooldown_timer") then 
				self._armor_invulnerability_timer = false
				armor_icon:set_visible(self._armor_invulnerability_timer)
			end
    		o:set_visible(false)
  		end)
	end
	
	function HUDTeammate:health_cooldown_timer(t)
		local timer = self._cooldown_health_timer
    	if t and t > 1 and timer then
			timer:stop()
        	timer:animate(function(o)
            	o:set_visible(true)
            	local t_left = t + 13
				local health_icon = self._health_cooldown_icon
				local armor_icon = self._cooldown_icon				
            	while t_left >= 0.1 do
					self._health_timer = true
                	t_left = t_left - coroutine.yield()
					t_format = t_left < 9.9 and "%.1f" or "%.f"
                	o:set_text(string.format(t_format, t_left))
					o:set_color(ICT:GetColor("armorer_duration_timer_color") or Color.green)
            	end
				self._health_timer = false
				armor_icon:set_visible(self._armor_invulnerability_timer)
            	o:set_visible(false)
				health_icon:set_visible(self._health_timer)
        	end)
    	end
	end
	
	function HUDTeammate:animate_health_invulnerability(duration)
	    if not self._radial_health_panel:child("animate_health_circle") then return end
  		self._radial_health_panel:child("animate_health_circle"):animate(function (o)
		    local health_icon = self._health_cooldown_icon
			local armor_icon = self._cooldown_icon
    		o:set_color(Color(1, 1, 1, 1))
			self._radial_health_panel:child("animate_health_circle"):set_alpha(1)
	  	    self._health_timer = true
			armor_icon:set_visible(not self._health_timer)
			health_icon:set_visible(self._health_timer)
			health_icon:set_alpha(not ICT:GetOption("armorer_cooldown_timer") and 1 or 0.4)
    		o:set_visible(true)
    		over(duration, function (p)
      			o:set_color(Color(1, 1 - p, 1, 1))
    		end)
    		o:set_visible(false)
			if not ICT:GetOption("armorer_cooldown_timer") then
			    self._health_timer = false
				health_icon:set_visible(self._health_timer)
				armor_icon:set_visible(self._armor_invulnerability_timer)
			end
			o:set_visible(false)
  		end)
	end

	Hooks:PostHook(HUDTeammate, "set_condition", "ICT_HUDTeammate_set_condition", function (self, icon_data, ...)
	    local custody = icon_data ~= "mugshot_normal"
		local timer = self._cooldown_timer
		local health_timer = self._cooldown_health_timer
		local icon = self._cooldown_icon
		local health_icon = self._health_cooldown_icon
		if self._main_player and timer then
			timer:set_alpha(custody and 0 or 1)
			health_timer:set_alpha(custody and 0 or 1)
			icon:set_visible(not custody and self._armor_invulnerability_timer and not self._health_timer)
			health_icon:set_visible(not custody and self._health_timer)
		end
    end)
	
	Hooks:PostHook(HUDTeammate, "set_ability_radial", "ICT_HUDTeammate_set_ability_radial", function (self, data, ...)
        local progress = data.current / data.total
        if self._main_player then
			if self._radial_health_panel:child("animate_health_circle") then
				self._radial_health_panel:child("animate_health_circle"):set_alpha(progress > 0 and 0 or 1)
			end
			if progress > 0 then
				self._health_cooldown_icon:set_visible(false)
				self._cooldown_health_timer:set_visible(false)
			else
				self._cooldown_health_timer:set_visible(ICT:GetOption("armorer_cooldown_timer") and self._health_timer)
				self._health_cooldown_icon:set_visible(self._health_timer)
			end
    	end
    end)

	Hooks:PostHook(HUDTeammate, "activate_ability_radial", "ICT_HUDTeammate_activate_ability_radial", function (self, time_left, ...)
      	self._radial_health_panel:child("radial_custom"):animate(function (o)
        	over(time_left, function (p)
	    	    if self._main_player then
					self._radial_health_panel:child("animate_health_circle"):set_alpha(0)
					self._health_cooldown_icon:set_visible(false)
					self._cooldown_health_timer:set_visible(false)
	    		end
        	end)
			self._radial_health_panel:child("animate_health_circle"):set_alpha(1)
			self._cooldown_health_timer:set_visible(ICT:GetOption("armorer_cooldown_timer") and self._health_timer)
			self._health_cooldown_icon:set_visible(self._health_timer)
     	end)
    end)
end